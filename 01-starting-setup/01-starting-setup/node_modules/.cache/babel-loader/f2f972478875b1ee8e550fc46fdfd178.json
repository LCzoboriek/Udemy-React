{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ldccz\\\\Documents\\\\React Udemy\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\ExpenseDate.js\";\n//Components are still functions\nimport \"./ExpenseDate.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseDate(props) {\n  const month = props.date.toLocaleString(\"en-US\", {\n    month: \"long\"\n  });\n  const day = props.date.toLocaleString(\"en-US\", {\n    day: \"2-digit\"\n  });\n  const year = props.date.getFullYear(); // So this way is how you can add javascript syntax within react components and functions, you can\n  //run it inline but its best practice to extract the logic and place it on a seperate line\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-date\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-date__month\",\n      children: month\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-date__year\",\n      children: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-date__day\",\n      children: day\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ExpenseDate;\nexport default ExpenseDate; // Its best practice to keep your components small and focused, rather then big, try adding a feature at first, then extracting\n// that into its own file, to see if it still works. This can be helped through rigorous planning\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseDate\");","map":{"version":3,"names":["ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear"],"sources":["C:/Users/ldccz/Documents/React Udemy/01-starting-setup/01-starting-setup/src/components/ExpenseDate.js"],"sourcesContent":["//Components are still functions\r\nimport \"./ExpenseDate.css\";\r\nfunction ExpenseDate(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear(); // So this way is how you can add javascript syntax within react components and functions, you can\r\n  //run it inline but its best practice to extract the logic and place it on a seperate line\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n\r\n// Its best practice to keep your components small and focused, rather then big, try adding a feature at first, then extracting\r\n// that into its own file, to see if it still works. This can be helped through rigorous planning\r\n"],"mappings":";AAAA;AACA,OAAO,mBAAP;;;AACA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWC,cAAX,CAA0B,OAA1B,EAAmC;IAAEF,KAAK,EAAE;EAAT,CAAnC,CAAd;EACA,MAAMG,GAAG,GAAGJ,KAAK,CAACE,IAAN,CAAWC,cAAX,CAA0B,OAA1B,EAAmC;IAAEC,GAAG,EAAE;EAAP,CAAnC,CAAZ;EACA,MAAMC,IAAI,GAAGL,KAAK,CAACE,IAAN,CAAWI,WAAX,EAAb,CAH0B,CAGa;EACvC;;EAEA,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,wBACE;MAAK,SAAS,EAAC,qBAAf;MAAA,UAAsCL;IAAtC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,oBAAf;MAAA,UAAqCI;IAArC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAK,SAAS,EAAC,mBAAf;MAAA,UAAoCD;IAApC;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;KAbQL,W;AAeT,eAAeA,WAAf,C,CAEA;AACA"},"metadata":{},"sourceType":"module"}